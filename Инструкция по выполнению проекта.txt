
1. Создайте справочник стоимости доставки в страны shipping_country_rates из данных, 
указанных в shipping_country и shipping_country_base_rate, сделайте первичный ключ таблицы — серийный id, 
то есть серийный идентификатор каждой строчки. Важно дать серийному ключу имя «id». 
Справочник должен состоять из уникальных пар полей из таблицы shipping.

drop table if exists public.shipping_country_rates;

create table public.shipping_country_rates (
	id serial primary key,
	shipping_country text null,
	shipping_country_base_rate numeric(14,3) null
);


insert into public.shipping_country_rates(shipping_country, shipping_country_base_rate)
select distinct shipping_country, shipping_country_base_rate from shipping s

-----------------------------------

2. Создайте справочник тарифов доставки вендора по договору shipping_agreement из данных строки 
vendor_agreement_description через разделитель «:» (двоеточие без кавычек).
Названия полей: 
 
agreement_id,
agreement_number,
agreement_rate,
agreement_commission.
agreement_id сделайте первичным ключом.

Учтите, что при функции regexp возвращаются строковые значения. 
Поэтому чтобы привести полученные значения в нужный для таблицы формат, полезно воспользоваться функцией cast().

drop table if exists public.shipping_agreement;

create table public.shipping_agreement (
	agreement_id bigint primary key,
	agreement_number text null,
	agreement_rate numeric(14,3) null,
	agreement_commission numeric(14,3) null
);

insert into public.shipping_agreement(agreement_id, agreement_number, agreement_rate, agreement_commission)
select 
	cast(vendor_agreement_description[1] as integer) as agreement_id,
	vendor_agreement_description[2] as agreement_number,
	cast(vendor_agreement_description[3] as numeric(14,3)) as agreement_rate,
	cast(vendor_agreement_description[4] as numeric(14,3)) as agreement_commission
from
    (select distinct regexp_split_to_array(vendor_agreement_description, ':') as vendor_agreement_description
	 from shipping) as t1
order by agreement_id;

select * from public.shipping_agreement;

-----------------------------------

3. Создайте справочник о типах доставки shipping_transfer из строки shipping_transfer_description 
через разделитель «:» (двоеточие без кавычек). 
Названия полей: 
transfer_type,
transfer_model,
shipping_transfer_rate .
Первичным ключом таблицы сделайте серийный id.

Важно помнить про размерность знаков после запятой при выделении фиксированной длины в типе  numeric(). 
Например, если shipping_transfer_rate равен 2.5%, то при миграции в тип numeric(14,2) у вас отбросится 0,5%. 

drop table if exists public.shipping_transfer;

create table public.shipping_transfer (
	id serial primary key,
	transfer_type text null,
	transfer_model text null,
	shipping_transfer_rate numeric(14,3) null
);

insert into public.shipping_transfer(transfer_type, transfer_model, shipping_transfer_rate)
select 
	shipping_transfer_description[1] as transfer_type,
	shipping_transfer_description[2] as transfer_model,
	shipping_transfer_rate
from
    (select distinct regexp_split_to_array(shipping_transfer_description, ':') as shipping_transfer_description, shipping_transfer_rate
	 from shipping) as t1
order by transfer_type, transfer_model;

select * from public.shipping_transfer;

-----------------------------------

4. Создайте таблицу shipping_info, справочник комиссий по странам, с уникальными доставками shipping_id и 
свяжите ее с созданными справочниками shipping_country_rates, shipping_agreement, shipping_transfer и 
константной информации о доставке shipping_plan_datetime, payment_amount, vendor_id.

Cвязи с тремя таблицами-справочниками лучше делать внешними ключами — это обеспечит целостность модели данных и защитит её, 
если нарушится логика записи в таблицы.

drop table if exists public.shipping_info cascade;

create table public.shipping_info (
	shipping_id bigint primary key,
        vendor_id bigint NULL,
	payment_amount numeric(14, 2) NULL,
	shipping_plan_datetime timestamp NULL,
	shipping_transfer_id bigint NULL,
	shipping_agreement_id bigint NULL,
	shipping_country_rate_id bigint NULL,
	FOREIGN KEY (shipping_transfer_id) REFERENCES shipping_transfer(id) ON UPDATE cascade,
	FOREIGN KEY (shipping_agreement_id) REFERENCES shipping_agreement(agreement_id) ON UPDATE cascade,
	FOREIGN KEY (shipping_country_rate_id) REFERENCES shipping_country_rates(id) ON UPDATE cascade

);

with shipping_transfer AS
	(select id as shipping_transfer_id, concat_ws(':', transfer_type, transfer_model) as shipping_transfer_description from shipping_transfer),

	shipping_country_rates AS
	(select id as shipping_country_rate_id, shipping_country from shipping_country_rates)

insert into public.shipping_info(shipping_id, vendor_id, payment_amount, shipping_plan_datetime, shipping_transfer_id, shipping_agreement_id, shipping_country_rate_id)
select s.shippingid as shipping_id, s.vendorid as vendor_id, s.payment_amount, s.shipping_plan_datetime, st.shipping_transfer_id, cast(split_part(vendor_agreement_description, ':', 1) as bigint) as shipping_agreement_id, scr.shipping_country_rate_id
from shipping s
left join shipping_transfer st using (shipping_transfer_description)
left join shipping_country_rates scr using (shipping_country)
group by s.shippingid, s.vendorid, s.payment_amount, s.shipping_plan_datetime, s.vendor_agreement_description, st.shipping_transfer_id, shipping_agreement_id, scr.shipping_country_rate_id;


-----------------------------------

5. Создайте таблицу статусов о доставке shipping_status и включите туда информацию из лога shipping (status , state). 
Добавьте туда вычислимую информацию по фактическому времени доставки 
shipping_start_fact_datetime, shipping_end_fact_datetime. Отразите для каждого уникального shipping_id его итоговое состояние доставки.

Данные в таблице должны отражать максимальный status и state по максимальному времени лога state_datetime в таблице shipping.

shipping_start_fact_datetime — это время state_datetime, когда state заказа перешёл в состояние booked.
shipping_end_fact_datetime — это время state_datetime , когда state заказа перешел в состояние recieved.

Удобно использовать оператор with для объявления временной таблицы, потому что можно сохранить информацию по shipping_id 
и максимальному значению state_datetime. Далее при записи информации в shipping_status 
можно сделать JOIN и дополнить таблицу нужными данными.

drop table if exists public.shipping_status;

create table public.shipping_status (
	shipping_id bigint NOT NULL,
	status text null,
	state text null,
	shipping_start_fact_datetime timestamp NULL,
	shipping_end_fact_datetime timestamp NULL
);


with 
	
	-- максимальное временя лога state_datetime в таблице shipping	

	state_datetime as
	(select shippingid, max(state_datetime) as state_datetime
	from shipping group by shippingid),

	-- state заказа перешёл в состояние booked

	state_booked as 
	(select shippingid, state_datetime as shipping_start_fact_datetime
	from shipping where state='booked'),
	
	-- state заказа перешел в состояние recieved	

	state_recieved as 
	(select shippingid, max(case when state = 'recieved' then state_datetime else null end) as shipping_end_fact_datetime 
	from shipping group by shippingid order by shippingid)

-- Данные в таблице должны отражать максимальный status и state по максимальному времени лога state_datetime в таблице shipping.	

insert into public.shipping_status(shipping_id, status, state, shipping_start_fact_datetime, shipping_end_fact_datetime)
select s.shippingid as shipping_id, s.status, s.state, sb.shipping_start_fact_datetime, sr.shipping_end_fact_datetime 
from shipping s
inner join state_booked sb on sb.shippingid=s.shippingid
inner join state_datetime sd on sd.shippingid=s.shippingid and sd.state_datetime=s.state_datetime
inner join state_recieved sr on sr.shippingid=s.shippingid
order by s.shippingid;


/*

drop table if exists public.shipping_status;

create table public.shipping_status (
	shipping_id bigint NOT NULL,
	status text null,
	state text null,
	shipping_start_fact_datetime timestamp NULL,
	shipping_end_fact_datetime timestamp NULL
);

insert into public.shipping_status(shipping_id, status, state, shipping_start_fact_datetime, shipping_end_fact_datetime)
select shippingid as shipping_id,	   
	   array_[1] as status,
	   array_[2] as state,
	   state_datetime as shipping_start_fact_datetime,
       TO_TIMESTAMP(array_[3], 'YYYY-MM-DD HH24:MI:ss') as shipping_end_fact_datetime	   
	   
from
(select shippingid, min(s.state_datetime) as state_datetime,
	regexp_split_to_array((select CONCAT_WS(';', status, state, state_datetime) from shipping s1 where s.shippingid=s1.shippingid order by s1.state_datetime desc limit 1), ';') as array_
from shipping s
group by s.shippingid) t;

select * from public.shipping_status;

*/


-----------------------------------

6. Создайте представление shipping_datamart на основании готовых таблиц для аналитики и включите в него:
shipping_id
vendor_id
transfer_type — тип доставки из таблицы shipping_transfer

full_day_at_shipping — количество полных дней, в течение которых длилась доставка.
Высчитывается так: shipping_end_fact_datetime − shipping_start_fact_datetime

is_delay — статус, показывающий просрочена ли доставка.
Высчитывается так: shipping_end_fact_datetime > shipping_plan_datetime → 1; 0

is_shipping_finish — статус, показывающий, что доставка завершена. Если финальный status = finished → 1; 0

delay_day_at_shipping — количество дней, на которые была просрочена доставка.
Высчитывается как: shipping_end_fact_datetime > shipping_plan_datetime → shipping_end_fact_datetime − shipping_plan_datetime; 0)

payment_amount — сумма платежа пользователя

vat — итоговый налог на доставку
Высчитывается так: payment_amount ∗ (shipping_country_base_rate + agreement_rate + shipping_transfer_rate)

profit — итоговый доход компании с доставки.
Высчитывается как: payment_amount ∗ agreement_commission

Вы уже создали внешние ключи в справочниках, и здесь можно заметить, чем они удобны. 
Если использовать JOIN трёх справочников: shipping_transfer, shipping_country_rates и 
shipping_agreement — к таблице с внешними ключами shipping_info, то разные идентификаторы внешних 
ключей могут автоматически подсвечивать возможные связи.

Чтобы получить разницу между датами, удобно использовать функцию age(). 
Для получения целых дней можно использовать функцию date_part(’day’, ... )

drop view shipping_datamart;

create view shipping_datamart as
select si.shipping_id, 
       si.vendor_id, 
       st.transfer_type, 
       extract(day from (ss.shipping_end_fact_datetime - ss.shipping_start_fact_datetime)) as full_day_at_shipping,
       case
	       when ss.shipping_end_fact_datetime > si.shipping_plan_datetime then 1
       	   else 0
       end as is_delay,  
       case
	       when ss.status = 'finished' then 1
       	   else 0
       end as is_shipping_finish,
       case
	       when ss.shipping_end_fact_datetime > si.shipping_plan_datetime then date_part('day', age(ss.shipping_end_fact_datetime, si.shipping_plan_datetime))
       	   else 0
       end as delay_day_at_shipping,
       si.payment_amount,  
       (si.payment_amount * (scr.shipping_country_base_rate + sa.agreement_rate + st.shipping_transfer_rate)) as vat,
       si.payment_amount * sa.agreement_commission as profit

       
from shipping_info si
inner join shipping_transfer st on st.id = si.shipping_transfer_id 
inner join shipping_status ss on ss.shipping_id = si.shipping_id 
inner join shipping_country_rates scr on scr.id = si.shipping_country_rate_id 
inner join shipping_agreement sa on sa.agreement_id = si.shipping_agreement_id;

select count(*) from shipping_datamart;


